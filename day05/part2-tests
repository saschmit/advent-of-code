#!/usr/bin/python

import sys
import intcode

def give(val):
    return lambda: val

def assert_eq(val):
    def out_fn(out):
        assert val == out

    return out_fn

cmp_test1 = [3,9,8,9,10,9,4,9,99,-1,8]
cmp_test2 = [3,9,7,9,10,9,4,9,99,-1,8]
cmp_test3 = [3,3,1108,-1,8,3,4,3,99]
cmp_test4 = [3,3,1107,-1,8,3,4,3,99]

jmp_test1 = [3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9]
jmp_test2 = [3,3,1105,-1,9,1101,0,0,12,4,12,99,1]
jmp_test3 = [3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99]

print("cmp_test1")
intcode.run_pgm(cmp_test1, give(8), assert_eq(1))
intcode.run_pgm(cmp_test1, give(9), assert_eq(0))

print("cmp_test2")
intcode.run_pgm(cmp_test2, give(7), assert_eq(1))
intcode.run_pgm(cmp_test2, give(8), assert_eq(0))
intcode.run_pgm(cmp_test2, give(9), assert_eq(0))

print("cmp_test3")
intcode.run_pgm(cmp_test3, give(8), assert_eq(1))
intcode.run_pgm(cmp_test3, give(9), assert_eq(0))

print("cmp_test4")
intcode.run_pgm(cmp_test4, give(7), assert_eq(1))
intcode.run_pgm(cmp_test4, give(8), assert_eq(0))
intcode.run_pgm(cmp_test4, give(9), assert_eq(0))

print("jmp_test1")
intcode.run_pgm(jmp_test1, give(-1), assert_eq(1))
intcode.run_pgm(jmp_test1, give(0), assert_eq(0))
intcode.run_pgm(jmp_test1, give(1), assert_eq(1))

print("jmp_test2")
intcode.run_pgm(jmp_test2, give(-1), assert_eq(1))
intcode.run_pgm(jmp_test2, give(0), assert_eq(0))
intcode.run_pgm(jmp_test2, give(1), assert_eq(1))

print("jmp_test3")
intcode.run_pgm(jmp_test3, give(7), assert_eq(999))
intcode.run_pgm(jmp_test3, give(8), assert_eq(1000))
intcode.run_pgm(jmp_test3, give(9), assert_eq(1001))
