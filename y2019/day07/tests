#!/usr/bin/python3

import intcode

cases = (
    (
        [3,15,3,16,1002,16,10,16,1,16,15,15,4,15,99,0,0],
        [4,3,2,1,0],
        43210
    ),
    (
        [3,23,3,24,1002,24,10,24,1002,23,-1,23,101,5,23,23,1,24,23,23,4,23,99,0,0],
        [0,1,2,3,4],
        54321
    ),

    (
        [3,31,3,32,1002,32,10,32,1001,31,-2,31,1007,31,0,33,1002,33,7,33,1,33,31,31,1,32,31,31,4,31,99,0,0,0],
        [1,0,4,3,2],
        65210
    )
)

def gen_in_fn(setting, in_val):
    buff.append(in_val)
    buff.append(setting)
    def in_fn():
        return buff.pop()

    return in_fn

def gen_out_fn(buff):
    def out_fn(val):
        buff.append(val)
    return out_fn

def permutation(lst): 
    # If lst is empty then there are no permutations 
    if len(lst) == 0: 
        return [] 
  
    # If there is only one element in lst then, only 
    # one permuatation is possible 
    if len(lst) == 1: 
        return [lst] 
  
    # Find the permutations for lst if there are 
    # more than 1 characters 
  
    l = [] # empty list that will store current permutation 
  
    # Iterate the input(lst) and calculate the permutation 
    for i in range(len(lst)): 
       m = lst[i] 
  
       # Extract lst[i] or m from the list.  remLst is 
       # remaining list 
       remLst = lst[:i] + lst[i+1:] 
  
       # Generating all permutations where m is first 
       # element 
       for p in permutation(remLst): 
           l.append([m] + p) 
    return l

for pgm, correct_settings, correct_result in cases:
    cur_max = 0
    best_settings = None
    for settings in permutation([0,1,2,3,4]):
        out_val = 0
        for n in range(5):
            in_val = out_val
            buff = []
            intcode.run_pgm(pgm, gen_in_fn(settings[n], in_val), gen_out_fn(buff))
            out_val = buff.pop()
        if out_val > cur_max:
            cur_max = out_val
            best_settings = settings

    assert best_settings == correct_settings
    assert cur_max == correct_result
    print("OK")
