#!/usr/bin/python

from __future__ import print_function
import sys

BLANK = '.'
CENTER = 'o'
INTERSECTION = 'X'
SELF_INTERSECTION = '+'
HORIZ = '-'
VERT = '|'

COLOR_NONE = ''
COLOR_RESET = '\033[0m'
COLOR_ONE = '\033[33m'
COLOR_TWO = '\033[32m'
COLOR_BOTH = '\033[31m'

class Panel:
    def __init__(self, cols, rows):
        self.panel = [ cell[:] for cell in [ [ (BLANK, COLOR_NONE) ] * cols ] * rows ]
        self.panel[0][0] = (CENTER, COLOR_NONE)
        self.skew = (0, 0)
    def read(self, col, row):
        self.skew = (min(self.skew[0], col), min(self.skew[1], row))
        return self.panel[row][col]
    def draw(self, col, row, item):
        self.skew = (min(self.skew[0], col), min(self.skew[1], row))
        self.panel[row][col] = item
    def __str__(self):
        if len(self.panel[0]) > 237:
            return "[You don't want that]"
        out = BLANK * (len(self.panel[0]) + 2) + '\n'
        for y in xrange(len(self.panel)):
            y += self.skew[1]
            out += BLANK + "".join(map(lambda t: t[1] + t[0] + COLOR_RESET, self.panel[y][self.skew[0]:] + self.panel[y][:self.skew[0]])) + BLANK + "\n"
        out += BLANK * (len(self.panel[0]) + 2)
        return out

def combine(old, new):
    if old[1] == COLOR_NONE:
        if old[0] == CENTER:
            return old
        else:
            return new
    elif old[1] == COLOR_ONE and new[1] == COLOR_TWO or old[1] == COLOR_TWO and new[1] == COLOR_ONE:
        return (INTERSECTION, COLOR_BOTH)
    else:
        return (SELF_INTERSECTION, old[1])

def apply_wire(panel, color, path):
    out_list = []
    start = (0, 0)
    for step in path:
        direction = step[0]
        count = int(step[1:])
        for i in xrange(count + 1):
            if direction == 'U':
                point = (start[0], start[1] - i)
                shape = VERT
            elif direction == 'D':
                point = (start[0], start[1] + i)
                shape = VERT
            elif direction == 'L':
                point = (start[0] - i, start[1])
                shape = HORIZ
            elif direction == 'R':
                point = (start[0] + i, start[1])
                shape = HORIZ

            cell = combine(panel.read(point[0], point[1]), (shape, color))
            if cell[0] == INTERSECTION:
                out_list.append((point[0], point[1]))
            panel.draw(point[0], point[1], cell)

            if i == count:
                start = point

    return out_list

def compute_final_grid_size(paths):
    min_col = 0
    max_col = 0

    min_row = 0
    max_row = 0
    for path in paths:
        cur_col = 0
        cur_row = 0
        for step in path:
            direction = step[0]
            count = int(step[1:])
            if direction == 'U':
                cur_row -= count
            elif direction == 'D':
                cur_row += count
            elif direction == 'L':
                cur_col -= count
            elif direction == 'R':
                cur_col += count

            min_col = min(min_col, cur_col)
            max_col = max(max_col, cur_col)
            min_row = min(min_row, cur_row)
            max_row = max(max_row, cur_row)

    return (max_col - min_col + 1, max_row - min_row + 1)

paths = map(lambda s: s.split(','), open(sys.argv[1]).read().strip().split('\n'))
print(paths)

size = compute_final_grid_size(paths)

panel = Panel(size[0], size[1])

apply_wire(panel, COLOR_ONE, paths[0])
intersections = apply_wire(panel, COLOR_TWO, paths[1])

print(panel)

part1 = min(map(sum, map(lambda t: (abs(t[0]), abs(t[1])), intersections)))
print(part1)
